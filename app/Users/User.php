<?php

namespace PN\Users;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Notifications\Notifiable;
use PN\Foundation\Presenters\PresenterTrait;

class User extends \Illuminate\Foundation\Auth\User
{
    use PresenterTrait, Notifiable;

    const USER = 0;
    const MODERATOR = 1;
    const ADMIN = 2;

    protected $table = 'users';
    public $timestamps = true;
    protected $guarded = array(
        'username',
        'email',
        'password',
        'password_token',
        'remember_token',
        'confirm_token',
        'confirmed',
        'api_key'
    );
    protected $fillable = array(
        'identifier',
        'social',
        'social_id',
        'social_name',
        'notification_rate',
        'recap_rate',
        'avatar',
        'title',
        'flair',
        'steam',
        'twitch',
        'twitter',
        'bitcoin',
        'paypal',
        'register_ip',
        'last_activity_ip',
        'last_activity'
    );
    protected $visible = array(
        'identifier',
        'username',
        'confirmed',
        'social',
        'social_name',
        'notification_rate',
        'recap_rate',
        'avatar',
        'title',
        'flair',
        'steam',
        'twitch',
        'twitter',
        'bitcoin',
        'paypal',
        'register_ip',
        'last_activity_ip',
        'last_activity'
    );

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        User::creating(function ($asset) {
            $asset->identifier = substr(sha1(uniqid()), 0, 10);
        });
    }

    protected $hidden = array('email', 'password', 'password_token', 'remember_token', 'confirm_token', 'api_key');

    public function assets()
    {
        return $this->hasMany(\PN\Assets\Asset::class);
    }

    public function views()
    {
        return $this->hasMany(\PN\Tracking\View::class);
    }

    public function downloads()
    {
        return $this->hasMany(\PN\Tracking\Download::class);
    }

    public function videos()
    {
        return $this->hasMany(\PN\Media\Video::class);
    }

    public function screenshots()
    {
        return $this->hasMany(\PN\Media\Screenshot::class);
    }

    public function likes()
    {
        return $this->hasMany(\PN\Social\Like2::class);
    }

    public function threads()
    {
        return $this->hasMany(\PN\Social\Forum\Thread::class);
    }

    public function threadReads()
    {
        return $this->hasMany(\PN\Social\Forum\Read::class);
    }

    public function attachments()
    {
        return $this->hasMany(\PN\Social\Forum\Attachment::class);
    }

    public function posts()
    {
        return $this->hasMany(\PN\Social\Forum\Post::class);
    }

    public function comments()
    {
        return $this->hasMany(\PN\Social\Comment::class);
    }

    public function notifications()
    {
        return $this->hasMany(\PN\Social\Notification::class);
    }

    public function getAssets()
    {
        return $this->assets;
    }

    public function getScreenshots()
    {
        return $this->screenshots;
    }

    public function getPosts()
    {
        return $this->posts;
    }

    public function setAvatar($imageData)
    {
        $image = \Image::make($imageData);

        $name = sha1(uniqid()) . '.jpg';

        \Storage::disk('avatars')->put($name, $image->resize(500, 500, function($constraint){
            $constraint->upsize();
        })->encode('jpg'));

        $this->avatar = $name;
    }

    public function isAdmin()
    {
        return $this->level == self::ADMIN;
    }

    public function isModerator()
    {
        return $this->level == self::MODERATOR || $this->isAdmin();
    }

    public function getLikeCountAttribute()
    {
        return \LikeRepo::likeCountForUser($this);
    }

    public function getAssetCountAttribute()
    {
        // TODO count on database level instead of php

        return \Cache::remember(sprintf('user.%s.assetcount', $this->id), 60, function(){
            return $this->getAssets()->count();
        });
    }

    public function getPostCountAttribute()
    {
        // TODO count on database level instead of php

        return \Cache::remember(sprintf('user.%s.postcount', $this->id), 60, function(){
            return $this->getPosts()->count();
        });
    }

    public function hasTwitter()
    {
        return $this->twitter != '';
    }

    public function hasSteam()
    {
        return $this->steam != '';
    }

    public function hasTwitch()
    {
        return $this->twitch != '';
    }

    public function hasPaypal()
    {
        return $this->paypal != '';
    }

    public function hasBitcoin()
    {
        return $this->bitcoin != '';
    }

    public function liked(Model $likeable)
    {
        return \LikeRepo::findByUserAndLikeable($this, $likeable) != null;
    }
}
